[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "resource-allocation-python"
version = "1.0.0"
description = "Python-based Resource Management System with Excel Integration"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Resource Allocation Team", email = "admin@resourceallocation.com"}
]
keywords = ["resource allocation", "fleet management", "excel automation", "vehicle allocation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Business/Enterprise",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "openpyxl>=3.1.2",
    "xlwings>=0.31.0",
    "pandas>=2.2.0",
    "numpy>=1.26.0",
    "pydantic>=2.5.0",
    "python-dateutil>=2.8.2",
    "yagmail>=0.15.293",
    "email-validator>=2.1.0",
    "schedule>=1.2.0",
    "APScheduler>=3.10.4",
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.1",
    "loguru>=0.7.2",
    "rich>=13.7.0",
    "cachetools>=5.3.2",
    "diskcache>=5.6.3",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.21.1",
    "black>=23.12.0",
    "ruff>=0.1.0",
    "mypy>=1.8.0",
    "isort>=5.13.0",
    "pre-commit>=3.6.0",
]
gui = [
    "customtkinter>=5.2.0",
    "ttkbootstrap>=1.10.1",
]

[project.scripts]
resource-allocation = "src.main:main"
ra-setup = "scripts.setup:main"
ra-test = "scripts.test_runner:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*", "scripts*"]
exclude = ["tests*", "docs*"]

[tool.black]
line-length = 100
target-version = ["py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | logs
  | outputs
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.ruff]
line-length = 100
target-version = "py312"
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".git",
    ".ruff_cache",
    ".venv",
    "__pypackages__",
    "_build",
    "build",
    "dist",
    "logs",
    "outputs",
]

[tool.mypy]
python_version = "3.12"
files = [
    "src/models",
]
follow_imports = "skip"
ignore_missing_imports = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks integration tests",
    "unit: marks unit tests",
    "excel: marks tests that require Excel",
    "email: marks tests that require email setup",
    "gui: marks GUI tests (smoke tests for UI components)",
]

[tool.coverage.run]
branch = true
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/gui/*",  # Exclude GUI from coverage
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
